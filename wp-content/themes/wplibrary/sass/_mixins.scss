/** Mixins **/

@mixin animation($animate...) {
	$max: length($animate);
	$animations: "";

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}

	-webkit-animation: $animations;
	-moz-animation: $animations;
	-o-animation: $animations;
	animation: $animations;
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}

	@-moz-keyframes #{$animationName} {
		@content;
	}

	@-o-keyframes #{$animationName} {
		@content;
	}

	@keyframes #{$animationName} {
		@content;
	}
}

@mixin font-smoothing($value: on) {
	@if $value == on {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
	@else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}

@mixin fonts($typeface, $fontsize, $lineheight) {
	font-family:$typeface;
	font-size:fontsize($fontsize);
	line-height:lineheight($lineheight, $fontsize);
}

@function fontsize($pixels, $basepx: $font-size-base) {
    @if $pixels == inherit {
        @return inherit;
    }
    @else {
        @return #{$pixels / 16}rem;
    }
}

@function lineheight($pixels, $fontsize: $font-size-base) {
    @if $pixels == inherit {
        @return inherit;
    }
    @else {
        @return #{$pixels / strip-unit($fontsize)};
    }
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}